# [ doc = "Reader of register CONFIG" ] pub type R = crate :: R < u32 , super :: CONFIG > ; # [ doc = "Writer for register CONFIG" ] pub type W = crate :: W < u32 , super :: CONFIG > ; # [ doc = "Register CONFIG `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CONFIG { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `sha_en`" ] pub type SHA_EN_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `sha_en`" ] pub struct SHA_EN_W < 'a > { w : & 'a mut W , } impl < 'a > SHA_EN_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `endian_swap`" ] pub type ENDIAN_SWAP_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `endian_swap`" ] pub struct ENDIAN_SWAP_W < 'a > { w : & 'a mut W , } impl < 'a > ENDIAN_SWAP_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } # [ doc = "Reader of field `digest_swap`" ] pub type DIGEST_SWAP_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `digest_swap`" ] pub struct DIGEST_SWAP_W < 'a > { w : & 'a mut W , } impl < 'a > DIGEST_SWAP_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 2 ) ) | ( ( ( value as u32 ) & 0x01 ) << 2 ) ; self . w } } # [ doc = "Reader of field `select_256`" ] pub type SELECT_256_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `select_256`" ] pub struct SELECT_256_W < 'a > { w : & 'a mut W , } impl < 'a > SELECT_256_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 3 ) ) | ( ( ( value as u32 ) & 0x01 ) << 3 ) ; self . w } } impl R { # [ doc = "Bit 0 - Enable the SHA512 core" ] # [ inline ( always ) ] pub fn sha_en ( & self ) -> SHA_EN_R { SHA_EN_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Swap the endianness on the input data" ] # [ inline ( always ) ] pub fn endian_swap ( & self ) -> ENDIAN_SWAP_R { ENDIAN_SWAP_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Swap the endianness on the output digest" ] # [ inline ( always ) ] pub fn digest_swap ( & self ) -> DIGEST_SWAP_R { DIGEST_SWAP_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Select SHA512/256 IV constants when set to `1`" ] # [ inline ( always ) ] pub fn select_256 ( & self ) -> SELECT_256_R { SELECT_256_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - Enable the SHA512 core" ] # [ inline ( always ) ] pub fn sha_en ( & mut self ) -> SHA_EN_W { SHA_EN_W { w : self } } # [ doc = "Bit 1 - Swap the endianness on the input data" ] # [ inline ( always ) ] pub fn endian_swap ( & mut self ) -> ENDIAN_SWAP_W { ENDIAN_SWAP_W { w : self } } # [ doc = "Bit 2 - Swap the endianness on the output digest" ] # [ inline ( always ) ] pub fn digest_swap ( & mut self ) -> DIGEST_SWAP_W { DIGEST_SWAP_W { w : self } } # [ doc = "Bit 3 - Select SHA512/256 IV constants when set to `1`" ] # [ inline ( always ) ] pub fn select_256 ( & mut self ) -> SELECT_256_W { SELECT_256_W { w : self } } }