# [ doc = "Reader of register FIFO" ] pub type R = crate :: R < u32 , super :: FIFO > ; # [ doc = "Writer for register FIFO" ] pub type W = crate :: W < u32 , super :: FIFO > ; # [ doc = "Register FIFO `reset()`'s with value 0" ] impl crate :: ResetValue for super :: FIFO { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `read_count`" ] pub type READ_COUNT_R = crate :: R < u16 , u16 > ; # [ doc = "Write proxy for field `read_count`" ] pub struct READ_COUNT_W < 'a > { w : & 'a mut W , } impl < 'a > READ_COUNT_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u16 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01ff ) | ( ( value as u32 ) & 0x01ff ) ; self . w } } # [ doc = "Reader of field `write_count`" ] pub type WRITE_COUNT_R = crate :: R < u16 , u16 > ; # [ doc = "Write proxy for field `write_count`" ] pub struct WRITE_COUNT_W < 'a > { w : & 'a mut W , } impl < 'a > WRITE_COUNT_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u16 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01ff << 9 ) ) | ( ( ( value as u32 ) & 0x01ff ) << 9 ) ; self . w } } # [ doc = "Reader of field `read_error`" ] pub type READ_ERROR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `read_error`" ] pub struct READ_ERROR_W < 'a > { w : & 'a mut W , } impl < 'a > READ_ERROR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 18 ) ) | ( ( ( value as u32 ) & 0x01 ) << 18 ) ; self . w } } # [ doc = "Reader of field `write_error`" ] pub type WRITE_ERROR_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `write_error`" ] pub struct WRITE_ERROR_W < 'a > { w : & 'a mut W , } impl < 'a > WRITE_ERROR_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 19 ) ) | ( ( ( value as u32 ) & 0x01 ) << 19 ) ; self . w } } # [ doc = "Reader of field `almost_full`" ] pub type ALMOST_FULL_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `almost_full`" ] pub struct ALMOST_FULL_W < 'a > { w : & 'a mut W , } impl < 'a > ALMOST_FULL_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 20 ) ) | ( ( ( value as u32 ) & 0x01 ) << 20 ) ; self . w } } # [ doc = "Reader of field `almost_empty`" ] pub type ALMOST_EMPTY_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `almost_empty`" ] pub struct ALMOST_EMPTY_W < 'a > { w : & 'a mut W , } impl < 'a > ALMOST_EMPTY_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 21 ) ) | ( ( ( value as u32 ) & 0x01 ) << 21 ) ; self . w } } # [ doc = "Reader of field `running`" ] pub type RUNNING_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `running`" ] pub struct RUNNING_W < 'a > { w : & 'a mut W , } impl < 'a > RUNNING_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 22 ) ) | ( ( ( value as u32 ) & 0x01 ) << 22 ) ; self . w } } impl R { # [ doc = "Bits 0:8 - read pointer" ] # [ inline ( always ) ] pub fn read_count ( & self ) -> READ_COUNT_R { READ_COUNT_R :: new ( ( self . bits & 0x01ff ) as u16 ) } # [ doc = "Bits 9:17 - write pointer" ] # [ inline ( always ) ] pub fn write_count ( & self ) -> WRITE_COUNT_R { WRITE_COUNT_R :: new ( ( ( self . bits >> 9 ) & 0x01ff ) as u16 ) } # [ doc = "Bit 18 - read error occurred" ] # [ inline ( always ) ] pub fn read_error ( & self ) -> READ_ERROR_R { READ_ERROR_R :: new ( ( ( self . bits >> 18 ) & 0x01 ) != 0 ) } # [ doc = "Bit 19 - write error occurred" ] # [ inline ( always ) ] pub fn write_error ( & self ) -> WRITE_ERROR_R { WRITE_ERROR_R :: new ( ( ( self . bits >> 19 ) & 0x01 ) != 0 ) } # [ doc = "Bit 20 - almost full" ] # [ inline ( always ) ] pub fn almost_full ( & self ) -> ALMOST_FULL_R { ALMOST_FULL_R :: new ( ( ( self . bits >> 20 ) & 0x01 ) != 0 ) } # [ doc = "Bit 21 - almost empty" ] # [ inline ( always ) ] pub fn almost_empty ( & self ) -> ALMOST_EMPTY_R { ALMOST_EMPTY_R :: new ( ( ( self . bits >> 21 ) & 0x01 ) != 0 ) } # [ doc = "Bit 22 - hash engine is running and controls are locked out" ] # [ inline ( always ) ] pub fn running ( & self ) -> RUNNING_R { RUNNING_R :: new ( ( ( self . bits >> 22 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bits 0:8 - read pointer" ] # [ inline ( always ) ] pub fn read_count ( & mut self ) -> READ_COUNT_W { READ_COUNT_W { w : self } } # [ doc = "Bits 9:17 - write pointer" ] # [ inline ( always ) ] pub fn write_count ( & mut self ) -> WRITE_COUNT_W { WRITE_COUNT_W { w : self } } # [ doc = "Bit 18 - read error occurred" ] # [ inline ( always ) ] pub fn read_error ( & mut self ) -> READ_ERROR_W { READ_ERROR_W { w : self } } # [ doc = "Bit 19 - write error occurred" ] # [ inline ( always ) ] pub fn write_error ( & mut self ) -> WRITE_ERROR_W { WRITE_ERROR_W { w : self } } # [ doc = "Bit 20 - almost full" ] # [ inline ( always ) ] pub fn almost_full ( & mut self ) -> ALMOST_FULL_W { ALMOST_FULL_W { w : self } } # [ doc = "Bit 21 - almost empty" ] # [ inline ( always ) ] pub fn almost_empty ( & mut self ) -> ALMOST_EMPTY_W { ALMOST_EMPTY_W { w : self } } # [ doc = "Bit 22 - hash engine is running and controls are locked out" ] # [ inline ( always ) ] pub fn running ( & mut self ) -> RUNNING_W { RUNNING_W { w : self } } }