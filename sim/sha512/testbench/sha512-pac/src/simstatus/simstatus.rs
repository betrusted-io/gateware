# [ doc = "Reader of register SIMSTATUS" ] pub type R = crate :: R < u32 , super :: SIMSTATUS > ; # [ doc = "Writer for register SIMSTATUS" ] pub type W = crate :: W < u32 , super :: SIMSTATUS > ; # [ doc = "Register SIMSTATUS `reset()`'s with value 0" ] impl crate :: ResetValue for super :: SIMSTATUS { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `success`" ] pub type SUCCESS_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `success`" ] pub struct SUCCESS_W < 'a > { w : & 'a mut W , } impl < 'a > SUCCESS_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x01 ) | ( ( value as u32 ) & 0x01 ) ; self . w } } # [ doc = "Reader of field `done`" ] pub type DONE_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `done`" ] pub struct DONE_W < 'a > { w : & 'a mut W , } impl < 'a > DONE_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 1 ) ) | ( ( ( value as u32 ) & 0x01 ) << 1 ) ; self . w } } impl R { # [ doc = "Bit 0 - Write `1` if simulation was a success" ] # [ inline ( always ) ] pub fn success ( & self ) -> SUCCESS_R { SUCCESS_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Write `1` to indicate to the simulator that the simulation is done" ] # [ inline ( always ) ] pub fn done ( & self ) -> DONE_R { DONE_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bit 0 - Write `1` if simulation was a success" ] # [ inline ( always ) ] pub fn success ( & mut self ) -> SUCCESS_W { SUCCESS_W { w : self } } # [ doc = "Bit 1 - Write `1` to indicate to the simulator that the simulation is done" ] # [ inline ( always ) ] pub fn done ( & mut self ) -> DONE_W { DONE_W { w : self } } }