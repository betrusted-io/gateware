# [ doc = "Reader of register CTRL" ] pub type R = crate :: R < u32 , super :: CTRL > ; # [ doc = "Writer for register CTRL" ] pub type W = crate :: W < u32 , super :: CTRL > ; # [ doc = "Register CTRL `reset()`'s with value 0" ] impl crate :: ResetValue for super :: CTRL { type Type = u32 ; # [ inline ( always ) ] fn reset_value ( ) -> Self :: Type { 0 } } # [ doc = "Reader of field `mode`" ] pub type MODE_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `mode`" ] pub struct MODE_W < 'a > { w : & 'a mut W , } impl < 'a > MODE_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! 0x07 ) | ( ( value as u32 ) & 0x07 ) ; self . w } } # [ doc = "Reader of field `key_len`" ] pub type KEY_LEN_R = crate :: R < u8 , u8 > ; # [ doc = "Write proxy for field `key_len`" ] pub struct KEY_LEN_W < 'a > { w : & 'a mut W , } impl < 'a > KEY_LEN_W < 'a > { # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x07 << 3 ) ) | ( ( ( value as u32 ) & 0x07 ) << 3 ) ; self . w } } # [ doc = "Reader of field `manual_operation`" ] pub type MANUAL_OPERATION_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `manual_operation`" ] pub struct MANUAL_OPERATION_W < 'a > { w : & 'a mut W , } impl < 'a > MANUAL_OPERATION_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 6 ) ) | ( ( ( value as u32 ) & 0x01 ) << 6 ) ; self . w } } # [ doc = "Reader of field `operation`" ] pub type OPERATION_R = crate :: R < bool , bool > ; # [ doc = "Write proxy for field `operation`" ] pub struct OPERATION_W < 'a > { w : & 'a mut W , } impl < 'a > OPERATION_W < 'a > { # [ doc = r"Sets the field bit" ] # [ inline ( always ) ] pub fn set_bit ( self ) -> & 'a mut W { self . bit ( true ) } # [ doc = r"Clears the field bit" ] # [ inline ( always ) ] pub fn clear_bit ( self ) -> & 'a mut W { self . bit ( false ) } # [ doc = r"Writes raw bits to the field" ] # [ inline ( always ) ] pub fn bit ( self , value : bool ) -> & 'a mut W { self . w . bits = ( self . w . bits & ! ( 0x01 << 7 ) ) | ( ( ( value as u32 ) & 0x01 ) << 7 ) ; self . w } } impl R { # [ doc = "Bits 0:2 - set cipher mode. Illegal values mapped to `AES_ECB`" ] # [ inline ( always ) ] pub fn mode ( & self ) -> MODE_R { MODE_R :: new ( ( self . bits & 0x07 ) as u8 ) } # [ doc = "Bits 3:5 - length of the aes block. Illegal values mapped to `AES128`" ] # [ inline ( always ) ] pub fn key_len ( & self ) -> KEY_LEN_R { KEY_LEN_R :: new ( ( ( self . bits >> 3 ) & 0x07 ) as u8 ) } # [ doc = "Bit 6 - If `1`, operation starts when `trigger` bit `start` is written, otherwise automatically on data and IV ready" ] # [ inline ( always ) ] pub fn manual_operation ( & self ) -> MANUAL_OPERATION_R { MANUAL_OPERATION_R :: new ( ( ( self . bits >> 6 ) & 0x01 ) != 0 ) } # [ doc = "Bit 7 - Sets encrypt/decrypt operation. `0` = encrypt, `1` = decrypt" ] # [ inline ( always ) ] pub fn operation ( & self ) -> OPERATION_R { OPERATION_R :: new ( ( ( self . bits >> 7 ) & 0x01 ) != 0 ) } } impl W { # [ doc = "Bits 0:2 - set cipher mode. Illegal values mapped to `AES_ECB`" ] # [ inline ( always ) ] pub fn mode ( & mut self ) -> MODE_W { MODE_W { w : self } } # [ doc = "Bits 3:5 - length of the aes block. Illegal values mapped to `AES128`" ] # [ inline ( always ) ] pub fn key_len ( & mut self ) -> KEY_LEN_W { KEY_LEN_W { w : self } } # [ doc = "Bit 6 - If `1`, operation starts when `trigger` bit `start` is written, otherwise automatically on data and IV ready" ] # [ inline ( always ) ] pub fn manual_operation ( & mut self ) -> MANUAL_OPERATION_W { MANUAL_OPERATION_W { w : self } } # [ doc = "Bit 7 - Sets encrypt/decrypt operation. `0` = encrypt, `1` = decrypt" ] # [ inline ( always ) ] pub fn operation ( & mut self ) -> OPERATION_W { OPERATION_W { w : self } } }