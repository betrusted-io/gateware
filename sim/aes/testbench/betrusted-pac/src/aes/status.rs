# [ doc = "Reader of register STATUS" ] pub type R = crate :: R < u32 , super :: STATUS > ; # [ doc = "Reader of field `idle`" ] pub type IDLE_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `stall`" ] pub type STALL_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `output_valid`" ] pub type OUTPUT_VALID_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `input_ready`" ] pub type INPUT_READY_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `operation_rbk`" ] pub type OPERATION_RBK_R = crate :: R < bool , bool > ; # [ doc = "Reader of field `mode_rbk`" ] pub type MODE_RBK_R = crate :: R < u8 , u8 > ; # [ doc = "Reader of field `key_len_rbk`" ] pub type KEY_LEN_RBK_R = crate :: R < u8 , u8 > ; # [ doc = "Reader of field `manual_operation_rbk`" ] pub type MANUAL_OPERATION_RBK_R = crate :: R < bool , bool > ; impl R { # [ doc = "Bit 0 - Core idle" ] # [ inline ( always ) ] pub fn idle ( & self ) -> IDLE_R { IDLE_R :: new ( ( self . bits & 0x01 ) != 0 ) } # [ doc = "Bit 1 - Core stall" ] # [ inline ( always ) ] pub fn stall ( & self ) -> STALL_R { STALL_R :: new ( ( ( self . bits >> 1 ) & 0x01 ) != 0 ) } # [ doc = "Bit 2 - Data output valid" ] # [ inline ( always ) ] pub fn output_valid ( & self ) -> OUTPUT_VALID_R { OUTPUT_VALID_R :: new ( ( ( self . bits >> 2 ) & 0x01 ) != 0 ) } # [ doc = "Bit 3 - Input value has been latched and it is OK to update to a new value" ] # [ inline ( always ) ] pub fn input_ready ( & self ) -> INPUT_READY_R { INPUT_READY_R :: new ( ( ( self . bits >> 3 ) & 0x01 ) != 0 ) } # [ doc = "Bit 4 - Operation readback" ] # [ inline ( always ) ] pub fn operation_rbk ( & self ) -> OPERATION_RBK_R { OPERATION_RBK_R :: new ( ( ( self . bits >> 4 ) & 0x01 ) != 0 ) } # [ doc = "Bits 5:7 - Actual mode selected by hardware readback" ] # [ inline ( always ) ] pub fn mode_rbk ( & self ) -> MODE_RBK_R { MODE_RBK_R :: new ( ( ( self . bits >> 5 ) & 0x07 ) as u8 ) } # [ doc = "Bits 8:10 - Actual key length selected by the hardware readback" ] # [ inline ( always ) ] pub fn key_len_rbk ( & self ) -> KEY_LEN_RBK_R { KEY_LEN_RBK_R :: new ( ( ( self . bits >> 8 ) & 0x07 ) as u8 ) } # [ doc = "Bit 11 - Manual operation readback" ] # [ inline ( always ) ] pub fn manual_operation_rbk ( & self ) -> MANUAL_OPERATION_RBK_R { MANUAL_OPERATION_RBK_R :: new ( ( ( self . bits >> 11 ) & 0x01 ) != 0 ) } }