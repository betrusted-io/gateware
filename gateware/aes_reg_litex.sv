// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

// prim_subreg I/O explainer (has state):
//  - WE -> software write enable
//  - WD -> software write data
//  - DE -> hardware write enable
//  - D  -> hardware data
//  software WE has priority over hardware DE
//
//  - QE -> high indicates to hardware that data should be accessed
//  - Q -> this is the value of WD or D to hardware, depending on WE/DE state
//  - QS -> exact copy of the Q value


// prim_subreg_ext I/O explainer (passthrough, no state):
//  - WE -> software write enable
//  - RE -> software read enable (?)
//  - WD -> software write data
//  - D  -> hardware data
//
//  - QE -> exact copy of software WE
//  - Q -> this is the value of WD from software
//  - QS -> exact copy of the D from hardware
//  - QRE -> exact copy of RE

module aes_reg_top #(
  parameter bit AES192Enable = 1,    // Can be 0 (disable), or 1 (enable).
  parameter     SBoxImpl     = "lut" // Can be "lut" (LUT-based SBox), or "canright".
) (
  input 	clk_i,
  input 	rst_ni,

  // Below Regster interface can be changed
  input [31:0] 	key_0_q,
  input 	key_0_qe,

  input [31:0] 	key_1_q,
  input 	key_1_qe,

  input [31:0] 	key_2_q,
  input 	key_2_qe,

  input [31:0] 	key_3_q,
  input 	key_3_qe,

  input [31:0] 	key_4_q,
  input 	key_4_qe,

  input [31:0] 	key_5_q,
  input 	key_5_qe,

  input [31:0] 	key_6_q,
  input 	key_6_qe,

  input [31:0] 	key_7_q,
  input 	key_7_qe,

  input [31:0] 	data_in_0,
  input 	data_in_0_qe,
  input [31:0] 	data_in_1,
  input 	data_in_1_qe,
  input [31:0] 	data_in_2,
  input 	data_in_2_qe,
  input [31:0] 	data_in_3,
  input 	data_in_3_qe,

  output [31:0] data_out_0,
  input data_out_0_re,
  output [31:0] data_out_1,
  input data_out_1_re,
  output [31:0] data_out_2,
  input data_out_2_re,
  output [31:0] data_out_3,
  input data_out_3_re,

  // iv registers
  input [31:0] iv_0_q,
  input iv_0_qe,
  input [31:0] iv_1_q,
  input iv_1_qe,
  input [31:0] iv_2_q,
  input iv_2_qe,
  input [31:0] iv_3_q,
  input iv_3_qe,

  // ctrl register
  input [2:0] ctrl_mode,
  input [2:0] ctrl_key_len,
  input ctrl_operation,
  input ctrl_manual_operation,
  input ctrl_update,   // this is the 'qe' signal

  // status
  output idle,
  output idle_de,
  output stall,
  output stall_de,
  output output_valid,
  output output_valid_de,
  output input_ready,
  output input_ready_de,
  output operation_rbk,
  output [2:0] mode_rbk,
  output [2:0] ctrl_key_len_rbk,
  output manual_operation_rbk,

  // trigger
  input start,
  input key_clear,
  input iv_clear,
  input data_in_clear,
  input data_out_clear,
  input prng_reseed
);

  import aes_reg_pkg::* ;

  aes_reg2hw_t reg2hw;
  aes_hw2reg_t hw2reg;

  /////////// BELOW SHOULD BE UPDATED FROM aes_reg_top.sv
  /////////// (but snip out references to tilelink register interface inference)
  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] key0_wd;
  logic key0_we;
  logic [31:0] key1_wd;
  logic key1_we;
  logic [31:0] key2_wd;
  logic key2_we;
  logic [31:0] key3_wd;
  logic key3_we;
  logic [31:0] key4_wd;
  logic key4_we;
  logic [31:0] key5_wd;
  logic key5_we;
  logic [31:0] key6_wd;
  logic key6_we;
  logic [31:0] key7_wd;
  logic key7_we;
  logic [31:0] iv0_wd;
  logic iv0_we;
  logic [31:0] iv1_wd;
  logic iv1_we;
  logic [31:0] iv2_wd;
  logic iv2_we;
  logic [31:0] iv3_wd;
  logic iv3_we;
  logic [31:0] data_in0_wd;
  logic data_in0_we;
  logic [31:0] data_in1_wd;
  logic data_in1_we;
  logic [31:0] data_in2_wd;
  logic data_in2_we;
  logic [31:0] data_in3_wd;
  logic data_in3_we;
  logic [31:0] data_out0_qs;
  logic data_out0_re;
  logic [31:0] data_out1_qs;
  logic data_out1_re;
  logic [31:0] data_out2_qs;
  logic data_out2_re;
  logic [31:0] data_out3_qs;
  logic data_out3_re;
  logic ctrl_operation_qs;
  logic ctrl_operation_wd;
  logic ctrl_operation_we;
  logic ctrl_operation_re;
  logic [2:0] ctrl_mode_qs;
  logic [2:0] ctrl_mode_wd;
  logic ctrl_mode_we;
  logic ctrl_mode_re;
  logic [2:0] ctrl_key_len_qs;
  logic [2:0] ctrl_key_len_wd;
  logic ctrl_key_len_we;
  logic ctrl_key_len_re;
  logic ctrl_manual_operation_qs;
  logic ctrl_manual_operation_wd;
  logic ctrl_manual_operation_we;
  logic ctrl_manual_operation_re;
  logic trigger_start_wd;
  logic trigger_start_we;
  logic trigger_key_clear_wd;
  logic trigger_key_clear_we;
  logic trigger_iv_clear_wd;
  logic trigger_iv_clear_we;
  logic trigger_data_in_clear_wd;
  logic trigger_data_in_clear_we;
  logic trigger_data_out_clear_wd;
  logic trigger_data_out_clear_we;
  logic trigger_prng_reseed_wd;
  logic trigger_prng_reseed_we;
  logic status_idle_qs;
  logic status_stall_qs;
  logic status_output_valid_qs;
  logic status_input_ready_qs;
  /////////// ABOVE SHOULD BE UPDATED FROM aes_reg_top.sv

  // Register instances

  // Subregister 0 of Multireg key
  // R[key0]: V(True)
   assign reg2hw.key[0].q = key_0_q;
   assign reg2hw.key[0].qe = key_0_qe;

   assign reg2hw.key[1].q = key_1_q;
   assign reg2hw.key[1].qe = key_1_qe;

   assign reg2hw.key[2].q = key_2_q;
   assign reg2hw.key[2].qe = key_2_qe;

   assign reg2hw.key[3].q = key_3_q;
   assign reg2hw.key[3].qe = key_3_qe;

   assign reg2hw.key[4].q = key_4_q;
   assign reg2hw.key[4].qe = key_4_qe;

   assign reg2hw.key[5].q = key_5_q;
   assign reg2hw.key[5].qe = key_5_qe;

   assign reg2hw.key[6].q = key_6_q;
   assign reg2hw.key[6].qe = key_6_qe;

   assign reg2hw.key[7].q = key_7_q;
   assign reg2hw.key[7].qe = key_7_qe;


  // Subregister 0 of Multireg data_in
  // R[data_in0]: V(False)
  // has attribute "WO" -- no readback from software
   assign reg2hw.data_in[0].qe = data_in_0_qe;
   assign reg2hw.data_in[0].q = data_in_0;

   assign reg2hw.data_in[1].qe = data_in_1_qe;
   assign reg2hw.data_in[1].q = data_in_1;

   assign reg2hw.data_in[2].qe = data_in_2_qe;
   assign reg2hw.data_in[2].q = data_in_2;

   assign reg2hw.data_in[3].qe = data_in_3_qe;
   assign reg2hw.data_in[3].q = data_in_3;

  // Subregister 0 of Multireg data_out
  // R[data_out0]: V(True)
   assign data_out_0 = hw2reg.data_out[0].d;
   assign reg2hw.data_out[0].re = data_out_0_re;
   assign data_out_1 = hw2reg.data_out[1].d;
   assign reg2hw.data_out[1].re = data_out_1_re;
   assign data_out_2 = hw2reg.data_out[2].d;
   assign reg2hw.data_out[2].re = data_out_2_re;
   assign data_out_3 = hw2reg.data_out[3].d;
   assign reg2hw.data_out[3].re = data_out_3_re;

   assign reg2hw.iv[0].q = iv_0_q;
   assign reg2hw.iv[0].qe = iv_0_qe;
   assign reg2hw.iv[1].q = iv_1_q;
   assign reg2hw.iv[1].qe = iv_1_qe;
   assign reg2hw.iv[2].q = iv_2_q;
   assign reg2hw.iv[2].qe = iv_2_qe;
   assign reg2hw.iv[3].q = iv_3_q;
   assign reg2hw.iv[3].qe = iv_3_qe;

  assign reg2hw.ctrl.manual_operation.q = ctrl_manual_operation;
  assign reg2hw.ctrl.mode.q[2:0] = ctrl_mode[2:0];
  assign reg2hw.ctrl.key_len.q[2:0] = ctrl_key_len[2:0];
  assign reg2hw.ctrl.operation.q = ctrl_operation;

  assign reg2hw.ctrl.mode.qe = ctrl_update;
  assign reg2hw.ctrl.key_len.qe = ctrl_update;
  assign reg2hw.ctrl.manual_operation.qe = ctrl_update;
  assign reg2hw.ctrl.operation.qe = ctrl_update;


  // trigger bank has attribute "WO"
  assign reg2hw.trigger.start.q=start;
  assign reg2hw.trigger.key_clear.q=key_clear;
  assign reg2hw.trigger.iv_clear.q=iv_clear;
  assign reg2hw.trigger.data_in_clear.q=data_in_clear;
  assign reg2hw.trigger.data_out_clear.q=data_out_clear;
  assign reg2hw.trigger.prng_reseed.q = prng_reseed;

  // status bank has attribute "RO"
  assign idle = hw2reg.status.idle.d;
  assign idle_de = hw2reg.status.idle.de;
  assign stall = hw2reg.status.stall.d;
  assign stall_de = hw2reg.status.stall.de;
  assign output_valid = hw2reg.status.output_valid.d;
  assign output_valid_de = hw2reg.status.output_valid.de;
  assign input_ready = hw2reg.status.input_ready.d;
  assign input_ready_de = hw2reg.status.input_ready.de;
  assign ctrl_key_len_rbk[2:0] = hw2reg.ctrl.key_len.d[2:0];
  assign operation_rbk = hw2reg.ctrl.operation.d;
  assign mode_rbk = hw2reg.ctrl.mode.d;
  assign manual_operation_rbk = hw2reg.ctrl.manual_operation.d;

  /////////// BELOW IS MERGED FROM aes.sv
  // parameter bit AES192Enable = 1,    // Can be 0 (disable), or 1 (enable).
  // parameter     SBoxImpl     = "lut" // Can be "lut" (LUT-based SBox), or "canright".

  logic        prng_data_req;
  logic        prng_data_ack;
  logic [63:0] prng_data;
  logic        prng_reseed_req;
  logic        prng_reseed_ack;

  aes_core #(
    .AES192Enable ( AES192Enable ),
    .SBoxImpl     ( SBoxImpl     )
  ) aes_core (
    .clk_i,
    .rst_ni,

    .prng_data_req_o   ( prng_data_req   ),
    .prng_data_ack_i   ( prng_data_ack   ),
    .prng_data_i       ( prng_data       ),
    .prng_reseed_req_o ( prng_reseed_req ),
    .prng_reseed_ack_i ( prng_reseed_ack ),

    .reg2hw,
    .hw2reg
  );

  aes_prng aes_prng (
    .clk_i,
    .rst_ni,

    .data_req_i   ( prng_data_req   ),
    .data_ack_o   ( prng_data_ack   ),
    .data_o       ( prng_data       ),
    .reseed_req_i ( prng_reseed_req ),
    .reseed_ack_o ( prng_reseed_ack ),

    // TODO: This still needs to be connected to the entropy source.
    // See https://github.com/lowRISC/opentitan/issues/1005
    .entropy_req_o(                      ),
    .entropy_ack_i(                 1'b1 ),
    .entropy_i    ( 64'hFEDCBA9876543210 )
  );

endmodule
