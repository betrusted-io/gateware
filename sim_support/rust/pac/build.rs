use std::process::Command;
use std::fs;
use std::io::{BufRead, BufReader, Write};
fn main() {
    println!("cargo:rerun-if-changed=../../../run/soc.svd");
    Command::new("svd2rust").args(&["--target", "riscv", "-i", "../../../run/soc.svd"]).status().unwrap();

    // These strings are generated by svd2rust.  Remove them to silence warnings.
    let bad_strings = [
        "# ! [ deny ( legacy_directory_ownership ) ]",
        "# ! [ deny ( plugin_as_library ) ]",
        "# ! [ deny ( safe_extern_statics ) ]",
        "# ! [ deny ( unions_with_drop_fields ) ]",
        "#![no_main]",
        "# ! [ no_std ]",
    ];

    let in_file = fs::File::open("lib.rs").expect("couldn't open generated lib.rs");
    let mut out_file = fs::File::create("src/pac.rs").expect("couldn't open output file");
    for line in BufReader::new(in_file).lines() {
        let line = line.unwrap();
        if bad_strings.contains(&line.as_str()) {
            println!("Found bad string, skipping");
            continue;
        }
        out_file.write(line.as_bytes()).expect("couldn't write line to pac.rs");
        out_file.write(b"\n").expect("couldn't write line ending to pac.rs");
    }
}
